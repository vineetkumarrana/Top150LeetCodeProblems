#LEETCODE PROBLEM 1 OF TOP150LEETCODEPROBLEMS : 

[#You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

 

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
Example 2:

Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].
Example 3:

Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.]

               ############## S O L U T I O N #################

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
  //TC : O(M+N)
  // Initialize three pointers:
         
         int i = m-1; // i points to the last element in the valid portion of nums1 (which is m-1).
        int j=n-1;  // j points to the last element in nums2 (which is n-1).
        int k=m+n-1; // k points to the last position in nums1's entire array (including the extra space for nums2 elements).

     // Traverse the arrays from the end towards the beginning   
        while(j>=0){   // Continue until all elements of nums2 are merged
            if(i>=0 && nums1[i]>nums2[j]){ // If nums1's current element is greater than nums2's current element
              nums1[k]=nums1[i];
              k--;  // Move k to the left
              i--;   // Move i to the left
            }
            else{    // If nums2's element is greater or nums1 is exhausted
                 nums1[k]=nums2[j]; // Place nums2's element at position k
                 k--;
                 j--;
            }  
        }
       
    }
};